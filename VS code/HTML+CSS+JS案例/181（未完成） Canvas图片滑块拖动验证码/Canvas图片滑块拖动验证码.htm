<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Canvas图片滑块拖动验证码</title>
    <style>
      * {
        margin: 0;
        padding: 0;
      }
      body {
        height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
      }
      .block {
        position: absolute;
        left: 0;
        top: 0;
      }
      .slider-container {
        position: relative;
        text-align: center;
        width: 310px;
        height: 40px;
        line-height: 40px;
        margin-top: 15px;
        background-color: #f7f9fa;
        color: #45454c;
        border: 1px solid #e4e7eb;
      }
      .slider {
        position: absolute;
        left: 0;
        top: 0;
        width: 40px;
        height: 40px;
        background: #fff;
        box-shadow: 0 0 3px rgba(0, 0, 0, 0.3);
        cursor: pointer;
        transition: background 0.2s linear;
      }
      .slider-mask {
        position: absolute;
        left: 0;
        top: 0;
        height: 40px;
        border: 1px solid #1991fa;
        background-color: #d1e9fe;
      }
      .slider-icon {
        position: absolute;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -57%);
        width: 80%;
        height: 70%;
        background: url(./img/RightarrowBlack.png) no-repeat;
        background-size: cover;
      }
      .slider-container-active .slider {
        height: 38px;
        position: absolute;
        top: -1px;
        border: 1px solid #1991fa;
      }
      .slider-container-active .slider-mask {
        height: 38px;
        border-width: 1px;
      }
      .slider-container-success .slider {
        height: 38px;
        position: absolute;
        top: -1px;
        border: 1px solid #52ccba;
        background-color: #52ccba !important;
      }
      .slider-container-success .slider-mask {
        height: 38px;
        border: 1px solid #52ccba;
        background-color: #d2f4ef;
      }
      .slider-container-success .slider-icon {
        background: url(./img/dui.png) no-repeat;
      }
      .slider-container-fail .slider {
        height: 38px;
        position: absolute;
        top: -1px;
        border: 1px solid #f57a7a;
        background-color: #f57a7a !important;
      }
      .slider-container-fail .slider-mask {
        height: 38px;
        border: 1px solid #f57a7a;
        background-color: #fce1e1;
      }
      .slider-container-fail .slider-icon {
        background: url(./img/cuo.png) no-repeat;
      }
      .slider-container-active .slider-text,
      .slider-container-success .slider-text,
      .slider-container-fail .slider-text {
        display: none;
      }
      .slider:hover {
        background: #1991fa;
      }
      .slider:hover .slider-icon {
        background: url(./img/Rightarrow.png);
      }
      .refresh-icon {
        position: absolute;
        right: 0;
        top: 0;
        width: 28px;
        height: 28px;
        background: url(./img/refresh.png) no-repeat;
        background-size: cover;
        cursor: pointer;
      }
      #msg {
        height: 20px;
        line-height: 20px;
        text-align: center;
        margin-top: 15px;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div id="captcha" style="position: relative">
        <!-- <canvas width="310" height="155"></canvas>
        <div class="refresh-icon"></div>
        <canvas class="block" width="62" height="155"></canvas>
        <div class="slider-container">
          <div class="slider-mask">
            <div class="slider">
              <span class="slider-icon"></span>
            </div>
          </div>
          <span class="slider-text">向右滑动滑块填充拼图</span>
        </div> -->
      </div>
      <div id="msg"></div>
    </div>
  </body>
  <script>
    (function (win) {
      const l = 42,
        r = 10,
        w = 310,
        h = 155,
        PI = Math.PI;
      const ll = l + r * 2;

      function getRandomNumberByRange(start, end) {
        return Math.round(Math.random() * (end - start) + start);
      }
      function createElement(tagName) {
        return document.createElement(tagName);
      }
      function createCanvas(width, height) {
        const canvas = createElement("canvas");
        canvas.width = width;
        canvas.height = height;
        return canvas;
      }

      function getRandomImg() {
        return (
          "https://picsum.photos/300/150/?image=" +
          getRandomNumberByRange(0, 100)
        );
      }
      function createImg(onload) {
        const img = createElement("img");
        img.crossOrigin = "Anonymous";
        img.onload = onload;
        img.onerror = () => {
          img.src = getRandomImg();
        };
        img.src = getRandomImg();
        return img;
      }
      function addClass(tag, className) {
        tag.classList.add(className);
      }
      function removeClass(tag, className) {
        tag.classList.remove(className);
      }
      function draw(ctx, operation, x, y) {
        ctx.beginPath();
        ctx.moveTo(x, y);
        ctx.lineTo(x + l / 2, y);
        ctx.arc(x + l / 2, y - r + 2, r, 0, 2 * PI);
        ctx.lineTo(x + l / 2, y);
        ctx.lineTo(x + l, y);
        ctx.lineTo(x + l, y + l / 2);
        ctx.arc(x + l + r - 2, y + l / 2, r, 0, 2 * PI);
        ctx.lineTo(x + l, y + l / 2);
        ctx.lineTo(x + l, y + l);
        ctx.lineTo(x, y);
        ctx.fillStyle = "#fff";
        ctx.beginPath();
        ctx.arc(x, y + l / 2, 1.5 * PI, 0, 0.5 * PI);
        ctx.globalCompositeOperation = "xor";
        ctx.fill();
      }
      function sum(x, y) {
        return x + y;
      }
      function square(x) {
        return x * x;
      }
      class captcha {
        constructor(el, success, fail) {
          this.el = el;
          this.success = success;
          this.fail = fail;
        }
        init() {
          this.initDOM();
          this.initImg();
          this.draw();
          this.bindEvents();
        }
        initDOM() {
          const canvas = createCanvas(w, h),
            block = canvas.cloneNode(true),
            sliderContainer = createElement("div"),
            sliderMask = createElement("div"),
            refreshIcon = createElement("div"),
            sliderIcon = createElement("span"),
            slider = createElement("div"),
            text = createElement("span");
          block.className = "block";
          sliderContainer.className = "slider-container";
          sliderMask.className = "slider-mask";
          slider.className = "slider";
          refreshIcon.className = "refresh-icon";
          sliderIcon.className = "slider-icon";
          text.className = "slider-text";
          text.innerHTML = "向右滑动滑块填充拼图";

          const el = this.el;
          el.appendChild(canvas);
          el.appendChild(refreshIcon);
          el.appendChild(block);
          slider.appendChild(sliderIcon);
          sliderMask.appendChild(slider);
          sliderContainer.appendChild(sliderMask);
          sliderContainer.appendChild(text);
          el.appendChild(sliderContainer);

          Object.assign(this, {
            canvas,
            block,
            sliderContainer,
            refreshIcon,
            slider,
            sliderMask,
            sliderIcon,
            text,
            canvasCtx: canvas.getContext("2d"),
            blockCtx: block.getContext("2d"),
          });
        }
        initImg() {
          const img = createImg(() => {
            this.canvasCtx.drawImage(img, 0, 0, w, h);
            this.blockCtx.drawImage(img, 0, 0, w, h);
            const y = this.y - r * 2 + 2;
            const imageDate = this.blockCtx.getImageData(this.x, y, ll, ll);
            this.block.width = ll;
            this.blockCtx.putIamgeData(imageDate, 0, y);
          });
          this.img = img;
        }
        draw() {
          this.x = getRandomNumberByRange(ll + 10, w - (ll + 10));
          this.y = getRandomNumberByRange(10 + r * 2, h - (ll + 10));
          draw(this.canvasCtx, "fill", this.x, this.y);
          draw(this.blockCtx, "clip", this.x, this.y);
        }
        clean() {
          this.canvasCtx.clearRect(0, 0, w, h);
          this.blockCtx.clearRect(0, 0, w, h);
          this.block.width = w;
        }
        bindEvents() {
          this.el.onselectstart = () => false;
          this.refreshIcon.onclick = () => {
            this.reset();
          };
          let originX,
            originY,
            trail = [],
            isMouseDown = false;
          this.slider.addEventListener("mousedown", function (e) {
            originX = e.x;
            originY = el.y;
            isMouseDown = true;
          });
          document.addEventListener("mousemove", (e) => {
            if (!isMouseDown) {
              return false;
            }
            const moveX = e.x - originX;
            const moveY = e.y - originY;
            if (moveX < 0 || moveX + 38 >= w) {
              return false;
            }
            this.slider.style.left = moveX + "px";
            var blockLeft = ((w - 40 - 20) / (w - 40)) * moveX;
            this.block.style.left = blockLeft + "px";
            addClass(this.sliderContainer, "slider-container-active");
            this.sliderMask.style.width = moveX + "px";
            trail.push(moveY);
          });
          document.addEventListener("mouseup", (e) => {
            if (!isMouseDown) {
              return false;
            }
            isMouseDown = false;
            if (e.x == originX) {
              return false;
            }
            removeClass(this.sliderContainer, "slider-container-active");
            this.trail = trail;
            const spliced = this.verify();
            if (spliced) {
              addClass(this.sliderContainer, "slider-container-success");
              this.success && this.success();
            } else {
              addClass(this.sliderContainer, "slider-container-fail");
              this.fail && this.fail();
              setTimeout(() => {
                this.reset();
              }, 1000);
            }
          });
        }
        reset() {
          this.sliderContainer.className = "slider-container";
          this.slider.style.left = 0;
          this.block.style.left = 0;
          this.sliderMask.style.width = 0;
          this.clean();
          this.img.src = getRandomImg();
          this.draw();
        }
        verify() {
          const left = parseInt(this.block.style.left);
          return Math.abs(left - this.x) < 10;
        }
      }
      win.captcha = {
        init: function (element, success, fail) {
          new captcha(element, success, fail).init();
        },
      };
    })(window);
  </script>
  <script>
    captcha.init(
      document.querySelector("#captcha"),
      function () {
        document.querySelector("#msg").innerHTML = "验证成功";
      },
      function () {
        document.querySelector("#msg").innerHTML = "验证失败";
      }
    );
  </script>
</html>
